!_TAG_EXTRA_DESCRIPTION	anonymous	/Include tags for non-named objects like lambda/
!_TAG_EXTRA_DESCRIPTION	fileScope	/Include tags of file scope/
!_TAG_EXTRA_DESCRIPTION	pseudo	/Include pseudo tags/
!_TAG_EXTRA_DESCRIPTION	subparser	/Include tags generated by subparsers/
!_TAG_FIELD_DESCRIPTION	epoch	/the last modified time of the input file (only for F\/file kind tag)/
!_TAG_FIELD_DESCRIPTION	file	/File-restricted scoping/
!_TAG_FIELD_DESCRIPTION	input	/input file/
!_TAG_FIELD_DESCRIPTION	name	/tag name/
!_TAG_FIELD_DESCRIPTION	pattern	/pattern/
!_TAG_FIELD_DESCRIPTION	typeref	/Type and name of a variable or typedef/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_KIND_DESCRIPTION!DTD	E,entity	/entities/
!_TAG_KIND_DESCRIPTION!DTD	a,attribute	/attributes/
!_TAG_KIND_DESCRIPTION!DTD	e,element	/elements/
!_TAG_KIND_DESCRIPTION!DTD	n,notation	/notations/
!_TAG_KIND_DESCRIPTION!DTD	p,parameterEntity	/parameter entities/
!_TAG_KIND_DESCRIPTION!Lua	f,function	/functions/
!_TAG_KIND_DESCRIPTION!Markdown	S,subsection	/level 2 sections/
!_TAG_KIND_DESCRIPTION!Markdown	T,l4subsection	/level 4 sections/
!_TAG_KIND_DESCRIPTION!Markdown	c,chapter	/chapters/
!_TAG_KIND_DESCRIPTION!Markdown	n,footnote	/footnotes/
!_TAG_KIND_DESCRIPTION!Markdown	s,section	/sections/
!_TAG_KIND_DESCRIPTION!Markdown	t,subsubsection	/level 3 sections/
!_TAG_KIND_DESCRIPTION!Markdown	u,l5subsection	/level 5 sections/
!_TAG_KIND_DESCRIPTION!OCaml	C,Constructor	/A constructor/
!_TAG_KIND_DESCRIPTION!OCaml	M,module	/Module or functor/
!_TAG_KIND_DESCRIPTION!OCaml	c,class	/classes/
!_TAG_KIND_DESCRIPTION!OCaml	e,Exception	/An exception/
!_TAG_KIND_DESCRIPTION!OCaml	f,function	/A function/
!_TAG_KIND_DESCRIPTION!OCaml	m,method	/Object's method/
!_TAG_KIND_DESCRIPTION!OCaml	p,val	/Signature item/
!_TAG_KIND_DESCRIPTION!OCaml	r,RecordField	/A 'structure' field/
!_TAG_KIND_DESCRIPTION!OCaml	t,type	/Type name/
!_TAG_KIND_DESCRIPTION!OCaml	v,var	/Global variable/
!_TAG_KIND_DESCRIPTION!Sh	a,alias	/aliases/
!_TAG_KIND_DESCRIPTION!Sh	f,function	/functions/
!_TAG_KIND_DESCRIPTION!Sh	h,heredoc	/label for here document/
!_TAG_KIND_DESCRIPTION!Sh	s,script	/script files/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_OUTPUT_VERSION	0.0	/current.age/
!_TAG_PARSER_VERSION!DTD	0.0	/current.age/
!_TAG_PARSER_VERSION!Lua	0.0	/current.age/
!_TAG_PARSER_VERSION!Markdown	0.0	/current.age/
!_TAG_PARSER_VERSION!OCaml	0.0	/current.age/
!_TAG_PARSER_VERSION!Sh	0.0	/current.age/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/jimmy/projects/vic2parser_reboot/lib/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	6.0.0	/p6.0.20221218.0/
!_TAG_ROLE_DESCRIPTION!DTD!element	attOwner	/attributes owner/
!_TAG_ROLE_DESCRIPTION!DTD!parameterEntity	condition	/conditions/
!_TAG_ROLE_DESCRIPTION!DTD!parameterEntity	elementName	/element names/
!_TAG_ROLE_DESCRIPTION!DTD!parameterEntity	partOfAttDef	/part of attribute definition/
!_TAG_ROLE_DESCRIPTION!Sh!heredoc	endmarker	/end marker/
!_TAG_ROLE_DESCRIPTION!Sh!script	loaded	/loaded/
Bool	types.ml	/^|Bool of bool $/;"	C	type:lexems
EQ	types.ml	/^|EQ$/;"	C	type:lexems
FROM	types.ml	/^|FROM$/;"	C	type:lexems
Float	types.ml	/^|Float of string$/;"	C	type:lexems
Handle	handle.ml	/^$/;"	M
Historical Flavour Mod	HFM/README.md	/^# Historical Flavour Mod$/;"	c
Int	types.ml	/^|Int of string$/;"	C	type:lexems
Keyword	types.ml	/^|Keyword of string$/;"	C	type:lexems
LB	types.ml	/^|LB$/;"	C	type:lexems
Lexer	lexer.ml	/^open Types$/;"	M
Parser	parser.ml	/^let v2_parser lexems = match lexems with$/;"	M
RB	types.ml	/^|RB$/;"	C	type:lexems
String	types.ml	/^|String of string $/;"	C	type:lexems
Tag	types.ml	/^|Tag $/;"	C	type:lexems
Types	types.ml	/^type lexems=$/;"	M
lexem_to_str	handle.ml	/^let lexem_to_str lexem = (match lexem with $/;"	f
lexems	types.ml	/^type lexems=$/;"	t
lexer	lexer.ml	/^let lexer file = $/;"	f
ls_to_str	lexer.ml	/^let ls_to_str ls = $/;"	f
match_reg	lexer.ml	/^let match_reg reg str= Str.string_match (Str.regexp reg)  str 0 $/;"	f
read_file_str	lexer.ml	/^let read_file_str f : char list= $/;"	f
str_to_ls	lexer.ml	/^let str_to_ls str = $/;"	f
v2_parser	parser.ml	/^let v2_parser lexems = match lexems with$/;"	f
